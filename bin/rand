#!/usr/bin/env python3
from __future__ import division, print_function
import math, random, os, sys
sys.path.append(os.path.abspath('..'))
from plant_growth import constants, neat_params

from plant_growth.evaluate import simulate_single
import MultiNEAT as NEAT

genome = NEAT.Genome(
    0, # ID
    constants.NUM_INPUTS,
    0, # NUM_HIDDEN
    constants.NUM_OUTPUTS,
    False, # FS_NEAT
    NEAT.ActivationFunction.UNSIGNED_SIGMOID, # Output activation function.
    NEAT.ActivationFunction.UNSIGNED_SIGMOID, # Hidden activation function.
    0, # Seed type, must be 1 to have hidden nodes.
    neat_params.params
)

pop = NEAT.Population(
    genome, # Seed genome.
    neat_params.params, # Params.
    True, # Randomize weights.
    1.0, # Random Range.
    14 # Random number generator seed.
)

constants.PLANT_EFFICIENCY = 10

class NetworkDummy(object):
    def Input(self, ls):
        self.ls = ls

    def ActivateFast(self):
        pass

    def Flush(self):
        pass

    def Output(self):
        # out = [0, 0, 0, 0]
        out = [random.random()*.5, 0, 0, 0]
        assert len(out) == constants.NUM_OUTPUTS
        return out

net = NEAT.NeuralNetwork()
simulate_single(NetworkDummy(), display=True)
