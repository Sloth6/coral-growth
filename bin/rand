#!/usr/bin/env python3
from __future__ import division, print_function
import math, random, os, sys, time, argparse
sys.path.append(os.path.abspath('..'))
import numpy as np
import MultiNEAT as NEAT
from tempfile import TemporaryDirectory

from coral_growth.coral import Coral
from coral_growth.simulate import simulate_network, simulate_genome
from coral_growth.viewer import AnimationViewer
from coral_growth.parameters import Parameters

params = Parameters()
params.n_signals = 4
params.n_morphogens = 0
params.morphogen_thresholds = 2
params.height_boost = 0.0
# params.max_defect = 1.4
params.C = .30
params.max_growth = .25
params.max_polyps = 15000
params.max_steps = 150
params.max_volume = 75.0
params.light_amount = 0.6
params.max_face_growth = 1.3
params.gradient_height = 1.0
params.use_polar_direction = False
params.calculateTraits()

n_inputs, n_outputs = Coral.calculate_inouts(params)

usig = NEAT.ActivationFunction.UNSIGNED_SIGMOID

def create_initial_population():
    # Create network size based off coral and parameters.
    genome_prototype = NEAT.Genome(
        0, # ID
        n_inputs,
        0, # NUM_HIDDEN
        n_outputs,
        False, # FS_NEAT
        NEAT.ActivationFunction.UNSIGNED_SIGMOID, # Output activation function.
        NEAT.ActivationFunction.UNSIGNED_SIGMOID, # Hidden activation function.
        0, # Seed type, must be 1 to have hidden nodes.
        params.neat,
        0,
    )
    pop = NEAT.Population(
        genome_prototype, # Seed genome.
        params.neat,
        True, # Randomize weights.
        1.0, # Random Range.
        int(time.time()) # Random number generator seed.
    )
    return pop


class NetworkDummy(object):
    depth=1
    def NumInputs(self):
        return n_inputs

    def NumOutputs(self):
        return n_outputs

    def Input(self, input):
        self.input = input

    def ActivateFast(self):
        pass

    def Flush(self):
        pass

    def Output(self):
        # out = [1 for _ in range(self.NumOutputs())]
        out = [random.random() for _ in range(self.NumOutputs())]
        # out = [0 for _ in range(self.NumOutputs())]
        # out[0] = 1
        return out

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("--steps", default=25, help="Num Steps.", type=int, required=False)
    parser.add_argument("--show", default=1, help="Display output.", type=int, required=False)
    args = parser.parse_args()
    params.max_steps = args.steps

    with TemporaryDirectory() as tmp_dir:
        pop = create_initial_population()
        genomes = NEAT.GetGenomeList(pop)

        genome = genomes[0]
        traits = genome.GetGenomeTraits()

        for k, v in traits.items():
            print(k,'\t', v)

        export_folder = None
        if args.show:
            export_folder = tmp_dir

        # coral = simulate_network(NetworkDummy(), NetworkDummy.depth, traits, [params],\
        #                          export_folder=export_folder, verbose=True)[0]
        coral = simulate_genome(genome, traits, [params], export_folder=export_folder,
                                verbose=False)[0]

        if args.show:
            exported = os.path.join(tmp_dir, '0')
            files = [f for f in os.listdir(exported) if f.endswith('.coral.obj')]
            files = sorted(files, key=lambda f: int(f.split('.')[0]))
            files = [os.path.join(exported, f) for f in files]
            view = AnimationViewer(files, (1400, 1000))
            view.main_loop()
