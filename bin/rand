#!/usr/bin/env python3
from __future__ import division, print_function
import math, random, os, sys, time
sys.path.append(os.path.abspath('..'))
import numpy as np
import MultiNEAT as NEAT
from tempfile import TemporaryDirectory

from coral_growth.coral import Coral
from coral_growth.simulate import simulate_network, simulate_genome
from coral_growth.viewer import AnimationViewer
from coral_growth.parameters import Parameters

params = Parameters()
params.n_signals = 2
params.n_morphogens = 1
params.morphogen_thresholds = 2
params.max_defect = 1.4
params.C = 0.2
params.max_growth = .4
params.max_polyps = 10000
params.light_amount = 0.9
params.max_steps = 25
params.calculateTraits()

num_inputs = Coral.num_inputs + params.n_memory + params.n_signals + \
             params.n_morphogens*(params.morphogen_thresholds - 1) + \
             (4 * params.use_polar_direction)

num_outputs = Coral.num_outputs + params.n_memory + params.n_signals + params.n_morphogens

usig = NEAT.ActivationFunction.UNSIGNED_SIGMOID

def create_initial_population():
    # Create network size based off coral and parameters.

    genome_prototype = NEAT.Genome(
        0, # ID
        num_inputs,
        0, # NUM_HIDDEN
        num_outputs,
        False, # FS_NEAT
        NEAT.ActivationFunction.UNSIGNED_SIGMOID, # Output activation function.
        NEAT.ActivationFunction.UNSIGNED_SIGMOID, # Hidden activation function.
        0, # Seed type, must be 1 to have hidden nodes.
        params,
        0,
    )

    pop = NEAT.Population(
        genome_prototype, # Seed genome.
        params,
        True, # Randomize weights.
        1.0, # Random Range.
        int(time.time()) # Random number generator seed.
    )
    return pop


class NetworkDummy(object):
    depth=1
    def NumInputs(self):
        return num_inputs

    def NumOutputs(self):
        return num_outputs

    def Input(self, input):
        self.input = input

    def ActivateFast(self):
        pass

    def Flush(self):
        pass

    def Output(self):
        # out = [1 for _ in range(self.NumOutputs())]
        out = [random.random() for _ in range(self.NumOutputs())]
        # out = [0 for _ in range(self.NumOutputs())]
        # out[0] = 1
        return out

if __name__ == '__main__':

    if len(sys.argv) > 1:
        params.max_steps = int(sys.argv[1])

    with TemporaryDirectory() as tmp_dir:
        pop = create_initial_population()
        genomes = NEAT.GetGenomeList(pop)

        genome = genomes[0]
        traits = genome.GetGenomeTraits()
        print(traits)

        coral = simulate_network(NetworkDummy(), NetworkDummy.depth, traits, [params],\
                                 export_folder=tmp_dir, verbose=True)[0]

        # coral = simulate_genome(genome, traits, [params], export_folder=tmp_dir,
        #                         verbose=False)[0]
        total = sum(coral.function_times.values())
        for k, v in sorted(coral.function_times.items()):
            print(k, v, v/ total)
        print()

        exported = os.path.join(tmp_dir, '0')
        files = [f for f in os.listdir(exported) if f.endswith('.coral.obj')]
        files = sorted(files, key=lambda f: int(f.split('.')[0]))
        files = [os.path.join(exported, f) for f in files]
        view = AnimationViewer(files, (1400, 1000))
        view.main_loop()
