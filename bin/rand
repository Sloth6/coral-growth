#!/usr/bin/env python3
from __future__ import division, print_function
import math, random, os, sys
sys.path.append(os.path.abspath('..'))

import MultiNEAT as NEAT
from tempfile import TemporaryDirectory

from coral_growth.coral import Coral
from coral_growth.simulate import simulate_network
from coral_growth.viewer import AnimationViewer

time_steps = 12

world_configs = {
    'max_polyps': 5000,
    'growth_scalar': .25,
    'max_angle': .98 * 2 * 3.14159,
    'max_face_growth': 2.0,
    'morphogens': [{ 'diffU': 0.01, 'diffV': 0.005, 'F': 0.02, 'K': 0.05 }]
}

class NetworkDummy(object):
    def Input(self, input):
        self.input = input

    def ActivateFast(self):
        pass

    def Flush(self):
        pass

    def Output(self):
        out = [0] * (Coral.num_outputs + len(world_configs['morphogens']))
        # out[0] = random.random()
        out[0] = (self.input[0]+1) * .5
        # out[0] = 0
        out[1] = random.random() /10

        # out[1] = .25
        return out


with TemporaryDirectory() as tmp_dir:
    net = NEAT.NeuralNetwork()
    simulate_network(time_steps, NetworkDummy(), [world_configs], \
                                            export_folder=tmp_dir, verbose=True)
    exported = os.path.join(tmp_dir, '0')
    files = [f for f in os.listdir(exported) if '.coral.obj' in f]
    files = sorted(files, key=lambda f: int(f.split('.')[0]))
    files = [os.path.join(exported, f) for f in files]
    view = AnimationViewer(files, (1000, 1000))
    view.main_loop()


