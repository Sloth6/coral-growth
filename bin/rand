#!/usr/bin/env python3
from __future__ import division, print_function
import math, random, os, sys, time, argparse
sys.path.append(os.path.abspath('..'))
import numpy as np
import MultiNEAT as NEAT
from tempfile import TemporaryDirectory

from coral_growth.simulate import simulate_network, simulate_genome
from coral_growth.viewer import AnimationViewer
from coral_growth.parameters import Parameters
from coral_growth.forms import forms
from coral_growth.evolution import create_initial_population

params = Parameters()
params.n_signals = 2
params.n_morphogens = 2
params.morphogen_thresholds = 2
params.height_boost = 0.0
params.C = .25
params.light_amount = 0.0
params.max_growth = .25
# params.max_nodes = 15000
# params.max_steps = 150
params.max_volume = 100.0
# params.light_amount = 0.6
# params.max_face_growth = 1.3
params.gradient_height = 0.0
params.collection_radius = 0
params.calculateTraits()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("--steps", default=25, help="Num Steps.", type=int, required=False)
    parser.add_argument("--show", default=1, help="Display output.", type=int, required=False)
    parser.add_argument("--net", default=0, help="The network has random output instead of a random network.", type=int)
    parser.add_argument('--form', default='coral', help="One of the forms in forms directory to evolve.")

    args = parser.parse_args()
    params.max_steps = args.steps

    Form = forms[ args.form ]
    # if args.form not in forms:
    #     raise ValueError('Form not one of the options, must be in', str(list(forms.keys())))


    with TemporaryDirectory() as tmp_dir:
        pop = create_initial_population(Form, params)
        genomes = NEAT.GetGenomeList(pop)

        genome = genomes[0]
        traits = genome.GetGenomeTraits()

        for k, v in traits.items():
            print(k,'\t', v)

        export_folder = None

        if args.show:
            export_folder = tmp_dir

        if args.net:
            n_inputs, n_outputs = Form.calculate_inouts(params)
            class NetworkDummy(object):
                depth=1
                def NumInputs(self):
                    return n_inputs

                def NumOutputs(self):
                    return n_outputs

                def Input(self, input):
                    self.input = input

                def ActivateFast(self):
                    pass

                def Flush(self):
                    pass

                def Output(self):
                    out = [random.random() for _ in range(self.NumOutputs())]
                    return out
            coral = simulate_network(Form, NetworkDummy(), NetworkDummy.depth, traits, [params],\
                                     export_folder=export_folder, verbose=True)[0]
        else:
            coral = simulate_genome(Form, genome, traits, [params], export_folder=export_folder,
                                    verbose=True)[0]

        if args.show:
            exported = os.path.join(tmp_dir, '0')
            files = [f for f in os.listdir(exported) if f.endswith('.form.obj')]
            files = sorted(files, key=lambda f: int(f.split('.')[0]))
            files = [os.path.join(exported, f) for f in files]
            view = AnimationViewer(files, (1400, 1000))
            view.main_loop()
