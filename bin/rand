#!/usr/bin/env python3
from __future__ import division, print_function
import math, random, os, sys
sys.path.append(os.path.abspath('..'))

import MultiNEAT as NEAT
from tempfile import TemporaryDirectory

from coral_growth.coral import Coral
from coral_growth.simulate import simulate_network
from coral_growth.viewer import AnimationViewer

time_steps = 20

world_configs = {
    'max_polyps': 10000,
    'growth_scalar': .125,
    'max_face_growth': 1.0,
    'morphogen_steps': 200,
    'polyp_memory': 2,
    'morph_thresholds': 3,
}

morphogens = [{ 'diffU': 0.01, 'diffV': 0.005, 'F': 0.02, 'K': 0.05 },
              { 'diffU': 0.01, 'diffV': 0.005, 'F': 0.02, 'K': 0.05 }]

class NetworkDummy(object):
    def NumInputs(self):
        return Coral.num_inputs + world_configs['polyp_memory'] + len(morphogens) * (world_configs['morph_thresholds']-1)

    def NumOutputs(self):
        return Coral.num_outputs + world_configs['polyp_memory'] + len(morphogens)

    def Input(self, input):
        self.input = input

    def ActivateFast(self):
        pass

    def Flush(self):
        pass

    def Output(self):
        out = [0] * self.NumOutputs()
        out[0] = random.random()# * world_configs[]
        out[1] = random.random()
        # out[2] = random.random()
        # out[0] = max(0, (self.input[Coral.num_outputs]+1) * .5)
        # # out[0] = 0
        # if out[0]:
        #     out[1] = 1
        # else:
        #     out[1] = 1 if random.random() < .2 else 0

        # out[1] = .25
        return out

with TemporaryDirectory() as tmp_dir:
    net = NEAT.NeuralNetwork()
    simulate_network(time_steps, NetworkDummy(), [world_configs], morphogens, \
                                            export_folder=tmp_dir, verbose=True)
    exported = os.path.join(tmp_dir, '0')
    files = [f for f in os.listdir(exported) if '.coral.obj' in f]
    files = sorted(files, key=lambda f: int(f.split('.')[0]))
    files = [os.path.join(exported, f) for f in files]
    view = AnimationViewer(files, (800, 600))
    view.main_loop()
