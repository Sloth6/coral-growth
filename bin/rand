#!/usr/bin/env python3
from __future__ import division, print_function
import math, random, os, sys
sys.path.append(os.path.abspath('..'))

import MultiNEAT as NEAT
from tempfile import TemporaryDirectory

from coral_growth.coral import Coral
from coral_growth.simulate import simulate_network
from coral_growth.viewer import AnimationViewer
from coral_growth.parameters import Parameters

params = Parameters()
params.addMorphogen()
params.addMorphogen()

params.max_steps = 20
params.max_polyps = 1000

num_inputs = Coral.num_inputs + params.polyp_memory + \
             params.n_morphogens*(params.morph_thresholds - 1)

num_outputs = Coral.num_outputs + params.polyp_memory + params.n_morphogens

usig = NEAT.ActivationFunction.UNSIGNED_SIGMOID
genome = NEAT.Genome(0, num_inputs, 0, num_outputs, False, usig, usig, 0, params)

class NetworkDummy(object):
    def NumInputs(self):
        return num_inputs

    def NumOutputs(self):
        return num_outputs

    def Input(self, input):
        self.input = input

    def ActivateFast(self):
        pass

    def Flush(self):
        pass

    def Output(self):
        # out = [0 for _ in range(self.NumOutputs())]
        out = [random.random() for _ in range(self.NumOutputs())]
        return out

with TemporaryDirectory() as tmp_dir:
    net = NEAT.NeuralNetwork()
    coral = simulate_network(NetworkDummy(), genome.GetGenomeTraits(), [params],\
                                         export_folder=tmp_dir, verbose=True)[0]
    exported = os.path.join(tmp_dir, '0')
    files = [f for f in os.listdir(exported) if '.coral.obj' in f]
    files = sorted(files, key=lambda f: int(f.split('.')[0]))
    files = [os.path.join(exported, f) for f in files]
    view = AnimationViewer(files, (1400, 1000))
    view.main_loop()
