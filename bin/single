#!/usr/bin/env python3
from __future__ import division, print_function
import math, random, os, time, sys
sys.path.append(os.path.abspath('..'))

import time
import random
import string
from datetime import datetime

from plant_growth import constants, neat_params
from plant_growth.pygameDraw import PygameDraw
from plant_growth.plot import plot
from plant_growth.evaluate import evaluate_genome
from subprocess import call

import MultiNEAT as NEAT

genome = NEAT.Genome(
    0, # ID
    constants.NUM_INPUTS,
    0, # NUM_HIDDEN
    constants.NUM_OUTPUTS,
    False, # FS_NEAT
    NEAT.ActivationFunction.UNSIGNED_SIGMOID, # Output activation function
    NEAT.ActivationFunction.UNSIGNED_SIGMOID, # Hidden activation function..
    0, # Seed type, must be 1 to have hidden nodes.
    neat_params.params
)

pop = NEAT.Population(
    genome, # Seed genome.
    neat_params.params,
    True, # Randomize weights.
    1.0, # Random Range.
    int(time.time()) # Random number generator seed.
)

def run(out_dir):
    view = PygameDraw(constants.WORLD_WIDTH, constants.WORLD_HEIGHT)

    def display_func(world):
        plot(view, world)

    last_fitness = 0.0
    t = time.time()

    for generation in range(constants.NUM_GENERATIONS):
        print('Starting generation', generation)

        genome_list = NEAT.GetGenomeList(pop)

        for genome in genome_list:
            plant = evaluate_genome(genome)
            fitness = plant.total_flowering
            fitness = 0

            for cid in range(plant.max_i):
                if plant.cell_flower[cid]:
                    fitness += plant.cell_y[cid]

            genome.SetFitness(fitness)

        fitnesses = [g.Fitness for g in genome_list]
        mean = sum(fitnesses) / float(len(fitnesses))
        maxf = max(fitnesses)

        runtime = time.time() - t
        t = time.time()
        print('Generation ran in %f, %f per plant' % (runtime, runtime/len(genome_list)))
        print('Max fitness:', maxf, 'Mean fitness:', mean)

        if maxf != last_fitness:
            best = pop.GetBestGenome()
            best.Save(out_dir+'/best_%i' % generation)
            evaluate(best, display=display_func)
            view.save(out_dir+'/best_%i.png' % generation)
            last_fitness = maxf

        pop.Epoch()
        print()

    print('Run Complete.')

if __name__ == '__main__':
    uid = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(4))
    out_dir = "out_{:%B_%d_%Y_%H-%M}".format(datetime.now())+uid

    os.makedirs(out_dir)

    run(out_dir)
    # call('./render_all '+out_dir, shell=True)
