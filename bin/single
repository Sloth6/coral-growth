#!/usr/bin/env python3
from __future__ import division, print_function
import math, random, os, time, sys
import shutil
sys.path.append(os.path.abspath('..'))

import time
import random
import string
from datetime import datetime

from coral_growth import neat_params
from coral_growth.simulate import simulate_genome
from coral_growth.coral import Coral
from subprocess import call

import MultiNEAT as NEAT

time_steps = 50

world_configs = {
    'max_polyps': 7500,
    'growth_scalar': .5,
    'max_angle': .98 * 2 * 3.14159,
    'max_face_growth': 2.0,
    'morphogens': [{ 'diffU': 0.01, 'diffV': 0.005, 'F': 0.02, 'K': 0.05 }]
}

genome = NEAT.Genome(
    0, # ID
    Coral.num_inputs + len(world_configs['morphogens']),
    0, # NUM_HIDDEN
    Coral.num_outputs + len(world_configs['morphogens']),
    False, # FS_NEAT
    NEAT.ActivationFunction.UNSIGNED_SIGMOID, # Output activation function
    NEAT.ActivationFunction.UNSIGNED_SIGMOID, # Hidden activation function..
    0, # Seed type, must be 1 to have hidden nodes.
    neat_params.params
)

pop = NEAT.Population(
    genome, # Seed genome.
    neat_params.params,
    True, # Randomize weights.
    1.0, # Random Range.
    int(time.time()) # Random number generator seed.
)

def evolve(generations, out_dir, run_id):
    last_fitness = 0.0
    t = time.time()

    for generation in range(generations):
        print(run_id)
        print('Starting generation', generation)

        genome_list = NEAT.GetGenomeList(pop)

        for genome in genome_list:
            try:
                corals = simulate_genome(time_steps, genome, [world_configs])
                fitness = corals[0].total_gametes
                genome.SetFitness(fitness)
            except Exception as e:
                print('Exception', e)
                genome.SetFitness(0)

            print('.', end='', flush=True)

        print()

        fitnesses = [ g.Fitness for g in genome_list ]
        mean = sum(fitnesses) / float(len(fitnesses))
        maxf = max(fitnesses)

        runtime = time.time() - t
        t = time.time()

        print('Generation ran in %f, %f per coral' % (runtime, runtime/len(genome_list)))
        print('Max fitness:', maxf, 'Mean fitness:', mean)

        if maxf != last_fitness:
            print('New best fitness.')
            best = pop.GetBestGenome()
            best.Save(out_dir+'/best_%i' % generation)

            with open(out_dir+'/scores.text', "a") as f:
                f.write("%i\t%f\n"%(generation, maxf))

            os.mkdir(os.path.join(out_dir, str(generation)))

            simulate_genome(time_steps, best, [world_configs], \
                            export_folder=os.path.join(out_dir, str(generation)))
            last_fitness = maxf

        pop.Epoch()
        print()

    print('Run Complete.')

def rand_id(n):
    options = string.ascii_uppercase + string.digits
    return ''.join(random.choice( options ) for _ in range(n))

if __name__ == '__main__':
    root = '../output'
    generations = 100
    rid = rand_id(4)
    print('Run ID: ', rid)

    dir_name = "out_{:%B_%d_%Y_%H_%M}_".format(datetime.now())+rid
    dir_path = os.path.join(root, dir_name)
    os.makedirs(dir_path)
    # shutil.copy(os.path.abspath('..')+'/coral_growth/constants.py', os.path.join(dir_path, 'constants.py'))
    shutil.copy(os.path.abspath('..')+'/coral_growth/neat_params.py', os.path.join(dir_path, 'neat_params.py'))

    evolve(generations, dir_path, rid)
    # call('./render_all '+out_dir, shell=True)
