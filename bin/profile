#!/usr/bin/env python3
from __future__ import division, print_function

import time
import random
import os, sys

sys.path.append(os.path.abspath('..'))
random.seed(123)
import MultiNEAT as NEAT
from coral_growth.coral import Coral
from coral_growth.simulate import simulate_network

time_steps = 40

world_configs = {
    'max_polyps': 8000,
    'growth_scalar': .25,
    'max_face_growth': 1.0,
    'morphogen_steps': 200,
    'polyp_memory': 0
}

morphogens = [{ 'diffU': 0.01, 'diffV': 0.005, 'F': 0.02, 'K': 0.05 }]

class NetworkDummy(object):
    def NumInputs(self):
        return Coral.num_inputs + len(morphogens)

    def NumOutputs(self):
        return Coral.num_outputs + len(morphogens)

    def Input(self, input):
        self.input = input

    def ActivateFast(self):
        pass

    def Flush(self):
        pass

    def Output(self):
        out = [0] * (Coral.num_outputs + len(morphogens))
        out[0] = random.random()
        out[1] = 1 if random.random() < .2 else 0
        return out

start = time.time()
net = NEAT.NeuralNetwork()
simulate_network(time_steps, NetworkDummy(), [world_configs], morphogens, verbose=False)
print('finished in', time.time() - start)
