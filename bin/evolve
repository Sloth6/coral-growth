#!/usr/bin/env python3
from __future__ import print_function
import random, os, sys, string, argparse, time
from datetime import datetime
from multiprocessing import Pool
import numpy as np
sys.path.append(os.path.abspath('..'))
import MultiNEAT as NEAT

from coral_growth.parameters import Parameters
from coral_growth.evolve_neat import evolve_neat
from coral_growth.evolve_novelty import evolve_novelty
from coral_growth.evolve_local import evolve_local

from coral_growth.forms import forms

def generate_id(n):
    options = string.ascii_uppercase + string.digits
    return ''.join(random.choice(options) for _ in range(n))

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("--gens", default=100, help="Number of generations.", type=int)
    parser.add_argument("--out", default='../output', help="Output directory.")
    parser.add_argument("--cores", default=1, help="Number of cores.", type=int)
    parser.add_argument('--method', default='neat', help="'neat', 'novelty' or 'local'.")
    parser.add_argument('--form', default='coral', help="One of the forms in forms directory to evolve.")

    # Allow arbitrary command line flags.
    args, remaining = parser.parse_known_args(sys.argv[1:])

    methods = ['neat', 'novelty', 'local']
    pool = None
    rid = generate_id(4)

    print('Run ID: ', rid)

    if args.method not in methods:
        print('Error: method not recognized', args.method)
        print('Method must be one of', methods)
        exit()

    if args.form.lower() not in forms:
        raise ValueError('Form not one of the options, must be in', str(list(forms.keys())))

    Form = forms[ args.form.lower() ]

    print(args)

    params = Parameters()

    # Update default parameters using optional command line input.
    for i in range(0, len(remaining), 2):
        flag = remaining[i].split('--')[1]
        value = remaining[i+1]
        value = int(value) if value.isdigit() else float(value)
        is_neat = (flag.split('.')[0] == 'neat')

        print('Parameter detected { %s: %s}'%(flag, str(value)))

        if is_neat:
            flag = flag.split('.')[1]
            assert hasattr(params.neat, flag), 'Unrecognized parameter: '+flag
            setattr(params.neat, flag, value)
        else:
            assert hasattr(params, flag), 'Unrecognized parameter: '+flag
            setattr(params, flag, value)

    if args.method == "novelty":
        params.neat.PopulationSize = 20
        dir_name = rid+ '__' + args.form + "__novelty_{:%B_%d_%Y_%H_%M}".format(datetime.now())
    elif args.method == "local":
        params.neat.PopulationSize = 20
        dir_name = rid+ '__' + args.form + "__local_{:%B_%d_%Y_%H_%M}".format(datetime.now())
    else:
        dir_name = rid+ '__' + args.form + "__{:%B_%d_%Y_%H_%M}".format(datetime.now())

    params.calculateTraits()
    dir_path = os.path.join(args.out, dir_name)
    os.makedirs(dir_path)

    params.write(os.path.join(dir_path, 'neat_params.txt'), \
                 os.path.join(dir_path, 'sim_params.txt'))

    if args.cores > 1:
        pool = Pool(processes=args.cores)

    if args.method == "novelty":
        evolve_novelty(Form, params, args.gens, dir_path, rid, pool)
    elif args.method == "local":
        evolve_local(Form, params, args.gens, dir_path, rid, pool)
    else:
        evolve_neat(Form, params, args.gens, dir_path, rid, pool)

    if pool is not None:
        pool.close()
        pool.join()
