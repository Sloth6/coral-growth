#!/usr/bin/env python3
from __future__ import print_function
import random, os, sys, string, argparse, time
from datetime import datetime
from multiprocessing import Pool
import numpy as np
sys.path.append(os.path.abspath('..'))
import MultiNEAT as NEAT

from coral_growth.parameters import Parameters
from coral_growth.evolve_neat import evolve_neat
from coral_growth.evolve_novelty import evolve_novelty
from coral_growth.evolve_local import evolve_local

def generate_id(n):
    options = string.ascii_uppercase + string.digits
    return ''.join(random.choice(options) for _ in range(n))

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("--gens", default=100, help="Generations.", type=int)
    parser.add_argument("--out", default='../output', help="Output dir.")
    parser.add_argument("--cores", default=1, help="Number of cores.", type=int)
    parser.add_argument('--method', default='neat')
    args = parser.parse_args()

    methods = ['neat', 'novelty', 'local']

    if args.method not in methods:
        print('Error: method not recognized', args.method)
        print('Method must be one of', methods)
        exit()

    print(args)
    rid = generate_id(4)
    print('Run ID: ', rid)

    params = Parameters()
    # Neat parameters.
    params.neat.MinSpecies = 3
    params.neat.PopulationSize = 60#80
    # Simulation parameters.
    params.n_signals = 2
    params.n_morphogens = 1
    params.morphogen_thresholds = 2
    params.gradient_height = 6.0
    params.gradient_bottom = 0.25
    params.light_amount = 0.5
    params.max_defect = 1.4

    params.C = .25
    params.max_growth = .20
    params.max_polyps = 10000#15000
    params.max_steps = 100#150
    params.max_volume = 50#75.0

    params.max_face_growth = 1.3

    params.calculateTraits()

    pool = None

    if args.method == "novelty":
        params.neat.PopulationSize = 20
        dir_name = rid+"__novelty_{:%B_%d_%Y_%H_%M}".format(datetime.now())
    elif args.method == "local":
        params.neat.PopulationSize = 20
        dir_name = rid+"__local_{:%B_%d_%Y_%H_%M}".format(datetime.now())
    else:
        dir_name = rid+"__{:%B_%d_%Y_%H_%M}".format(datetime.now())

    dir_path = os.path.join(args.out, dir_name)
    os.makedirs(dir_path)

    params.write(os.path.join(dir_path, 'neat_params.txt'), \
                 os.path.join(dir_path, 'sim_params.txt'))

    if args.cores > 1:
        pool = Pool(processes=args.cores)

    if args.method == "novelty":
        evolve_novelty(params, args.gens, dir_path, rid, pool)
    elif args.method == "local":
        evolve_local(params, args.gens, dir_path, rid, pool)
    else:
        evolve_neat(params, args.gens, dir_path, rid, pool)

    if pool is not None:
        pool.close()
        pool.join()

